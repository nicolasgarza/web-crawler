// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: frontier.proto

package frontier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FrontierService_AddURL_FullMethodName = "/frontier.FrontierService/AddURL"
	FrontierService_GetURL_FullMethodName = "/frontier.FrontierService/GetURL"
)

// FrontierServiceClient is the client API for FrontierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontierServiceClient interface {
	AddURL(ctx context.Context, in *AddURLRequest, opts ...grpc.CallOption) (*AddURLResponse, error)
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error)
}

type frontierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontierServiceClient(cc grpc.ClientConnInterface) FrontierServiceClient {
	return &frontierServiceClient{cc}
}

func (c *frontierServiceClient) AddURL(ctx context.Context, in *AddURLRequest, opts ...grpc.CallOption) (*AddURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddURLResponse)
	err := c.cc.Invoke(ctx, FrontierService_AddURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontierServiceServer is the server API for FrontierService service.
// All implementations should embed UnimplementedFrontierServiceServer
// for forward compatibility
type FrontierServiceServer interface {
	AddURL(context.Context, *AddURLRequest) (*AddURLResponse, error)
	GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error)
}

// UnimplementedFrontierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFrontierServiceServer struct {
}

func (UnimplementedFrontierServiceServer) AddURL(context.Context, *AddURLRequest) (*AddURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddURL not implemented")
}
func (UnimplementedFrontierServiceServer) GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}

// UnsafeFrontierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontierServiceServer will
// result in compilation errors.
type UnsafeFrontierServiceServer interface {
	mustEmbedUnimplementedFrontierServiceServer()
}

func RegisterFrontierServiceServer(s grpc.ServiceRegistrar, srv FrontierServiceServer) {
	s.RegisterService(&FrontierService_ServiceDesc, srv)
}

func _FrontierService_AddURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).AddURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_AddURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).AddURL(ctx, req.(*AddURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontierService_ServiceDesc is the grpc.ServiceDesc for FrontierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frontier.FrontierService",
	HandlerType: (*FrontierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddURL",
			Handler:    _FrontierService_AddURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _FrontierService_GetURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontier.proto",
}
